@c Copyright 2000, 2001, 2005, 2006, 2007, 2011 Free Software Foundation, Inc.
@c Copyright 2013 Synopsys Inc.
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node ARC-Dependent
@chapter ARC Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter ARC Dependent Features
@end ifclear

@set ARC_CORE_DEFAULT 6

@cindex ARC support
@menu
* ARC Options::              Options
* ARC Syntax::               Syntax
* ARC Floating Point::       Floating Point
* ARC Directives::           ARC Machine Directives
* ARC Modifiers::            ARC Assembler Modifiers
* ARC Symbols::              ARC Predefined Symbols
* ARC Opcodes::              Opcodes
@end menu


@node ARC Options
@section Options
@cindex ARC options
@cindex options for ARC

The following options control the type of CPU for which code is
assembled, and generic constraints on the code generated:

@table @code

@item -mcpu=@var{cpu}
@cindex @code{-mcpu=@var{cpu}} command line option, ARC
Set architecture type and register usage for @var{cpu}.  There are
also shortcut alias options available for backward compatibility and
convenience.  Supported values for @var{cpu} are

@table @code
@cindex @code{mA6} command line option, ARC
@cindex @code{mARC600} command line option, ARC
@item ARC600
Assemble for ARC 600.  Aliases: @code{-mA6}, @code{-mARC600}. This
is the default.

@item ARC601
@cindex @code{mARC600} command line option, ARC
Assemble for ARC 601. Alias: @code{-mARC601}.

@item ARC700
@cindex @code{mA7} command line option, ARC
@cindex @code{mARC700} command line option, ARC
Assemble for ARC 700.  Aliases: @code{-mA7}, @code{-mARC700}.

@item ARCv2EM
@cindex @code{mEM} command line option, ARC
@cindex @code{mav2em} command line option, ARC
Assemble for ARC EM.  Aliases: @code{-mEM} @code{-mav2em}.

@item ARCv2HS
@cindex @code{mHS} command line option, ARC
@cindex @code{mav2hs} command line option, ARC
Assemble for ARC HS.  Aliases: @code{-mHS}, @code{-mav2hs}.

@end table

@emph{Note:} the @code{.option} directive can to be used to select a core
variant from within assembly code.

@item -mld-extension-reg-mask=@var{mask}
@cindex @code{-mld-extension-reg-mask=@var{mask}} command line option, ARC
Gives a bit mask specifying which extension core registers are supported.

@item -muser-mode-only
@cindex @code{user-mode-only} command line option, ARC
Only assemble user mode instructions. Any other instructions will
trigger an error.

@end table

@c ARC extension instructions
ARC is a family of configurable processors.  Different extensions
provide additional instructions which must be supported by the
assembler.  For ARC EM, all possible extensions are supported by the
assembler, and no options are provided to control these extensions.
For the ARC 600 and ARC 700 cores, the following options control which
extension instructions are supported:

@table @code

@item -mbarrel-shifter
@cindex @code{-mbarrel-shifter} command line option, ARC
Assemble instructions supported by the barrel shifter.

@item -mdpfp
@cindex @code{-mdpfp} command line option, ARC
@itemx -mdpfp-compact
@cindex @code{-mdpfp-compact} command line option, ARC
@itemx -mdpfp-fast
@cindex @code{-mdpfp-fast} command line option, ARC
Assemble double precision floating point instructions supported by the
@code{FPX} extension.  There is no difference between the options;
they are provided to allow them to be passed down directly from the
compiler, where the different options provide different effects.

@item -mdsp-packa
@cindex @code{-mdsp-packa} command line option, ARC
Assemble instructions supported by the DSP Pack A extensions.

@item -mdvbf
@cindex @code{-mdvbf} command line option, ARC
Assemble instructions supported by the dual Viterbi butterfly
extension.

@item -mea
@cindex @code{-mea} command line option, ARC
Assemble extended arithmetic instructions.  @emph{Note:} this
functionality is not available with ARC EM.

@item -mlock
@cindex @code{-mlock} command line option, ARC
Assemble instructions supported by the @code{LLOCK} and @code{SCOND}
extensions added with the ARC 770 processor.

@item -mmac-24
@cindex @code{-mmac-24} command line option, ARC
Assemble instructions supported by the @code{MMAC-24} extension.

@item -mmac-d16
@cindex @code{-mmac-d16} command line option, ARC
Assemble instructions supported by the @code{MMAC-D16} extension.

@item -mmin-max
@cindex @code{-mmin-max} command line option, ARC
Assemble instructions supported by the @code{MIN-MAX} extension.

@item -mmul64
@cindex @code{-mmul64} command line option, ARC
Assemble @code{mul64} and @code{mulu64} instructions.

@item -mno-mpy
@cindex @code{-mno-mpy} command line option, ARC
Do not assemble @code{mpy} instructions.

@item -mnorm
@cindex @code{-mnorm} command line option, ARC
Assemble @code{norm} instructions.

@item -mrtsc
@cindex @code{-mrtsc} command line option, ARC
Assemble instructions supported by the @code{RTSC} extension added
with the ARC 770 processor.

@item -msimd
@cindex @code{-msimd} command line option, ARC
Assemble instructions supported by the @code{SIMD} extension.

@item -mspfp
@cindex @code{-mspfp} command line option, ARC
@itemx -mspfp-compact
@cindex @code{-mspfp-compact} command line option, ARC
@itemx -mspfp-fast
@cindex @code{-mspfp-fast} command line option, ARC
Assemble single precision floating point instructions supported by the
@code{FPX} extension.  There is no difference between the options;
they are provided to allow them to be passed down directly from the
compiler, where the different options provide different effects.

@item -mswap
@cindex @code{-mswap} command line option, ARC
Assemble @code{swap} instructions.

@item -mswape
@cindex @code{-mswape} command line option, ARC
Assemble instructions supported by the @code{SWAPE} extension added
with the ARC 770 processor.

@item -mtelephony
@cindex @code{-mtelephony} command line option, ARC
Assemble single and dual operand instructions supported by the
@code{TELEPHONY} extension.

@item -mxy
@cindex @code{-mxy} command line option, ARC
Assemble instructions supported by the @code{XY} memory extension.

@end table

The following options are maintained for backward compatibility, but
are now deprecated and will be removed in a future release:

@c Deprecated options
@table @code

@item -EB
@cindex @code{-EB} command line option, ARC
This option specifies that the output generated by the assembler
should be encoded for a big-endian processor and marked as such.  Use
of this option is now deprecated.  Users wanting big-endian code,
should use the @emph{arceb-} targets when building the tool chain, for
which big-endian is the default.

@item -EL
@cindex @code{-EL} command line option, ARC
This option specifies that the output generated by the assembler
should be encoded for a little-endian processor and marked as such.  Use
of this option is now deprecated.  Users wanting little-endian code,
should use the @emph{arc-} targets when building the tool chain, for
which little-endian is the default.

@item -mbarrel_shifter
@cindex @code{-mbarrel_shifter} command line option, ARC
Replaced by @code{-mbarrel-shifter}

@item -mdpfp_compact
@cindex @code{-mdpfp_compact} command line option, ARC
Replaced by @code{-mdpfp-compact}

@item -mdpfp_fast
@cindex @code{-mdpfp_fast} command line option, ARC
Replaced by @code{-mdpfp-fast}

@item -mdsp_packa
@cindex @code{-mdsp_packa} command line option, ARC
Replaced by @code{-mdsp-packa}

@item -mEA
@cindex @code{-mEA} command line option, ARC
Replaced by @code{-mea}

@item -mmac_24
@cindex @code{-mmac_24} command line option, ARC
Replaced by @code{-mmac-24}

@item -mmac_d16
@cindex @code{-mmac_d16} command line option, ARC
Replaced by @code{-mmac-d16}

@item -min_max
@cindex @code{-mmin_max} command line option, ARC
Replaced by @code{-mmin-max}

@item -mspfp_compact
@cindex @code{-mspfp_compact} command line option, ARC
Replaced by @code{-mspfp-compact}

@item -mspfp_fast
@cindex @code{-mspfp_fast} command line option, ARC
Replaced by @code{-mspfp-fast}

@end table

@node ARC Syntax
@section Syntax
@menu
* ARC-Chars::                Special Characters
* ARC-Regs::                 Register Names
@end menu

@node ARC-Chars
@subsection Special Characters

@table @code
@item %
@cindex register name prefix character, ARC
@cindex ARC register name prefix character
A register name can optionally be prefixed by a @samp{%} character.  So
register @code{%r0} is equivalent to @code{r0} in the assembly code.

@item #
@cindex line comment character, ARC
@cindex ARC line comment character
The presence of a @samp{#} character within a line (but not at the
start of a line) indicates the start of a comment that extends to the
end of the current line.

@emph{Note:} if a line starts with a @samp{#} character then it can
also be a logical line number directive (@pxref{Comments}) or a
preprocessor control command (@pxref{Preprocessing}).

@item @@
@cindex symbol prefix character, ARC
@cindex ARC symbol prefix character
Prefixing an operand with an @samp{@@} specifies that the operand is a
symbol and not a register. This is how the assembler disambiguates the
use of an ARC register name as a symbol. So the instruction
@example
mov r0, @@r0
@end example
moves the address of symbol @code{r0} into register @code{r0}.

@item `
@cindex line separator, ARC
@cindex statement separator, ARC
@cindex ARC line separator
The @samp{`} (backtick) character is used to separate statements on a
single line.

@cindex line
@item -
@cindex C preprocessor macro separator, ARC
@cindex ARC C preprocessor macro separator
Used as a separator to obtain a sequence of commands from a C
preprocessor macro.

@end table

@node ARC-Regs
@subsection Register Names

@cindex ARC register names
@cindex register names, ARC
The ARC assembler uses the following register names for its core
registers:

@table @code
@item r0-r31
@cindex core general registers, ARC
@cindex ARC core general registers
The core general registers.  Registers @code{r26} through @code{r31}
have special functions, and are usually referred to by those synonyms.

@item gp
@cindex global pointer, ARC
@cindex ARC global pointer
The global pointer and a synonym for @code{r26}.

@item fp
@cindex frame pointer, ARC
@cindex ARC frame pointer
The frame pointer and a synonym for @code{r27}.

@item sp
@cindex stack pointer, ARC
@cindex ARC stack pointer
The stack pointer and a synonym for @code{28}.

@item ilink1
@cindex level 1 interrupt link register, ARC
@cindex ARC level 1 interrupt link register
For ARC 600 and ARC 700, the level 1 interrupt link register and a
synonym for @code{r29}.  Not supported for ARCv2.

@item ilink
@cindex interrupt link register, ARC
@cindex ARC interrupt link register
For ARCv2, the interrupt link register and a synonym for
@code{r29}.  Not supported for ARC 600 and ARC 700.

@item ilink2
@cindex level 2 interrupt link register, ARC
@cindex ARC level 2 interrupt link register
For ARC 600 and ARC 700, the level 2 interrupt link register and a
synonym for @code{r30}.  Not supported for ARC v2.

@item blink
@cindex link register, ARC
@cindex ARC link register
The link register and a synonym for @code{r31}.

@item r32-r59
@cindex extension core registers, ARC
@cindex ARC extension core registers
The extension core registers.  Only available if enabled using
@option{-mld-extension-reg-mask}.

@item lp_count
@cindex loop counter, ARC
@cindex ARC loop counter
The loop count register.

@item pcl
@cindex word aligned program counter, ARC
@cindex ARC word aligned program counter
The word aligned program counter.

@end table

In addition the ARC processor has a large number of @emph{auxiliary
registers}. The precise set depends on the extensions being supported, 
but the following baseline set are always defined:

@table @code
@item identity
@cindex Processor Identification register, ARC
@cindex ARC Processor Identification register
Processor Identification register.  Auxiliary register address 0x4.

@item pc
@cindex Program Counter, ARC
@cindex ARC Program Counter
Program Counter.  Auxiliary register address 0x6.

@item status32
@cindex Status register, ARC
@cindex ARC Status register
Status register.  Auxiliary register address 0x0a.

@item bta
@cindex Branch Target Address, ARC
@cindex ARC Branch Target Address
Branch Target Address.  Auxiliary register address 0x412.

@item ecr
@cindex Exception Cause Register, ARC
@cindex ARC Exception Cause Register
Exception Cause Register.  Auxiliary register address 0x403.

@item int_vector_base
@cindex Interrupt Vector Base address, ARC
@cindex ARC Interrupt Vector Base address
Interrupt Vector Base address.  Auxiliary register address 0x25.

@item status32_p0
@cindex Stored STATUS32 register on entry to level P0 interrupts, ARC
@cindex ARC Stored STATUS32 register on entry to level P0 interrupts
Stored STATUS32 register on entry to level P0 interrupts.  Auxiliary
register address 0xb.

@item aux_user_sp
@cindex Saved User Stack Pointer, ARC
@cindex ARC Saved User Stack Pointer
Saved User Stack Pointer.  Auxiliary register address 0xd.

@item eret
@cindex Exception Return Address, ARC
@cindex ARC Exception Return Address
Exception Return Address.  Auxiliary register address 0x400.

@item erbta
@cindex BTA saved on exception entry, ARC
@cindex ARC BTA saved on exception entry
BTA saved on exception entry.  Auxiliary register address 0x401.

@item erstatus
@cindex STATUS32 saved on exception, ARC
@cindex ARC STATUS32 saved on exception
STATUS32 saved on exception.  Auxiliary register address 0x402.

@item bcr_ver
@cindex Build Configuration Registers Version, ARC
@cindex ARC Build Configuration Registers Version
Build Configuration Registers Version.  Auxiliary register address 0x60.

@item bta_link_build
@cindex Build configuration for: BTA Registers, ARC
@cindex ARC Build configuration for: BTA Registers
Build configuration for: BTA Registers.  Auxiliary register address 0x63.

@item vecbase_ac_build 
@cindex Build configuration for: Interrupts, ARC
@cindex ARC Build configuration for: Interrupts
Build configuration for: Interrupts.  Auxiliary register address 0x68.

@item rf_build
@cindex Build configuration for: Core Registers, ARC
@cindex ARC Build configuration for: Core Registers
Build configuration for: Core Registers.  Auxiliary register address 0x6e.

@item dccm_build 
@cindex DCCM RAM Configuration Register, ARC
@cindex ARC DCCM RAM Configuration Register
DCCM RAM Configuration Register.  Auxiliary register address 0xc1.

@end table

Additional auxiliary register names are defined according to the
processor architecture version and extensions selected by the options.

@node ARC Floating Point
@section Floating Point

@cindex floating point, ARC (@sc{ieee})
@cindex ARC floating point (@sc{ieee})
The baseline ARC core does not have hardware floating point
support. Software floating point support is provided by GCC following
@sc{ieee 754}.

Hardware floating point is provided through the double precision and
single precision @code{FPX} extensions.  The additional assembler
notation required is enabled through the @option{-mdpfp},
@option{-mdpfp-compact}, @option{-mdpfp-fast} options for double
precision, and @option{-mspfp}, @option{-mspfp-compact} and
@option{-mspfp-fast} options for single precision.

@node ARC Directives
@section ARC Machine Directives

@cindex machine directives, ARC
@cindex ARC machine directives
The ARC version of @code{@value{AS}} supports the following additional
machine directives:

@table @code

@item .extAuxRegister @var{name}, @var{addr}, @var{mode}
@cindex @code{extAuxRegister} directive, ARC
Auxiliary registers can be defined in the assembler source code by
using this directive.  The first parameter, @var{name}, is the name of the
new auxiliary register.  The second parameter, @var{addr}, is
address the of the auxiliary register.  The third parameter,
@var{mode}, specifies whether the register is readable and/or writable
and is one of: 
@table @code
@item r
Read only 

@item w
Write only

@item r|w
Read and write

@end table

For example:
@example
        .extAuxRegister mulhi, 0x12, w
@end example
specifies a write only extension auxiliary register, @var{mulhi} at
address 0x12.

@item .extCondCode @var{suffix}, @var{val}
@cindex @code{extCondCode} directive, ARC
ARC supports extensible condition codes. This directive defines a new
condition code, to be known by the suffix, @var{suffix} and will
depend on the value, @var{val} in the condition code.

For example:
@example
        .extCondCode is_busy,0x14
        add.is_busy  r1,r2,r3
@end example
will only execute the @code{add} instruction if the condition code
value is 0x14.

@item .extCoreRegister @var{name},@var{regnum},@var{mode},@var{shortcut}
@cindex @code{extCoreRegister} directive, ARC
Specifies an extension core register named @var{name} as a synonym for
the register numbered @var{regnum}.  The register number must be
between 32 and 59. The third argument, @var{mode}, indicates whether the
register is readable and/or writable and is one of:
@table @code
@item r
Read only 

@item w
Write only

@item r|w
Read and write

@end table

The final parameter, @var{shortcut} indicates whether the register has
a short cut in the pipeline.  The valid values are:
@table @code
@item can_shortcut
The register has a short cut in the pipeline.

@item cannot_shortcut
The register does not have a short cut in the pipeline.
@end table

For example:
@example
        .extCoreRegister mlo, 57, r , can_shortcut
@end example
defines a read only extension core register, @code{mlo}, which is
register 57, and can short cut the pipeline.

@item .extInstruction @var{name},@var{opcode},@var{subopcode},@var{suffixclass},@var{syntaxclass}
@cindex @code{extInstruction} directive, ARC
ARC allows the user to specify extension instructions.  These
extension instructions are not macros; the assembler creates encodings
for use of these instructions according to the specification by the
user.

The first argument, @var{name}, gives the name of the instruction.

The second argument, @var{opcode}, is the opcode to be used (bits 31:27
in the encoding). Valid values are 0x03 or 0x10-0x1f.

The third argument, @var{subopcode}, is the sub-opcode to be used, but
the correct value also depends on the fifth argument,
@var{syntaxclass}

The fourth argument, @var{suffixclass}, determines the kinds of
suffixes to be allowed.  Valid values are:
@table @code
@item SUFFIX_NONE
No suffixes are permitted;

@item SUFFIX_COND
Conditional suffixes are permitted; and

@item SUFFIX_FLAG
Flag setting suffixes are permitted.

@item SUFFIX_COND|SUFFIX_FLAG
Both conditional and flag setting suffices are permitted.

@end table

The fifth and final argument, @var{syntaxclass}, determines the syntax
class for the instruction.  It can have the following values:
@table @code
@item SYNTAX_2OP
2 Operand Instruction; or

@item SYNTAX_3OP
3 Operand Instruction .
@end table

The syntax class may be followed by @samp{|} and one of the following
modifiers.
@table @code

@item OP1_MUST_BE_IMM
Modifies syntax class @code{SYNTAX_3OP}, specifying that the first
operand of a three-operand instruction must be an immediate (i.e., the
result is discarded).  This is usually used to set the flags using
specific instructions and not retain results.

@item OP1_IMM_IMPLIED
Modifies syntax class @code{SYNTAX_20P}, specifying that there is an
implied immediate destination operand which does not appear in the
syntax.

For example, if the source code contains an instruction like:
@example
inst r1,r2 
@end example
the first argument is an implied immediate (that is, the result is
discarded).  This is the same as though the source code were: inst
0,r1,r2.

@end table

For example, defining a 64-bit multiplier with immediate operands:
@example
        .extInstruction  mp64, 0x14, 0x0, SUFFIX_COND|SUFFIX_FLAG,
                         SYNTAX_3OP|OP1_MUST_BE_IMM
@end example
which specifies an extension instruction named @code{mp64} with 3
operands.  It sets the flags and can be used with a condition code,
for which the first operand is an immediate, i.e. equivalent to
discarding the result of the operation.

A 2-instruction variant would be:
@example
        .extInstruction mul64,0x14,0x00,SUFFIX_COND, SYNTAX_2OP|OP1_IMM_IMPLIED
@end example
which describes a 2 operand instruction with an implicit first
immediate operand.  The result of this operation would be discarded.

@item .option @var{cpu}
@cindex @code{option} directive, ARC
The @code{.option} directive must be followed by the desired core
version. Permitted values for CPU are:
@table @code
@item ARC600
Assemble for the ARC600 instruction set

@item ARC700
Assemble for the ARC700 instruction set

@item ARCv2EM
Assemble for the ARC v2 EM instruction set

@end table

Note: the @code{.option} directive overrides the command line options
@code{-mcpu=@var{cpu}} and its aliases; a warning is emitted when the
version is not consistent between the two.

@end table

The following directives were previously listed as ARC dependent, but
are now standard GNU assembler directives:
@table @code

@item .short @var{expression} [, @var{expression}]*
@cindex @code{short} directive, ARC
@itemx .long @var{expression} [, @var{expression}]*
@cindex @code{long} directive, ARC
@itemx .word @var{expression} [, @var{expression}]*
@cindex @code{word} directive, ARC

@end table

The following directives are now deprecated and will be removed in a
future release.
@table @code

@item .2byte @var{expression} [, @var{expression}]*
@cindex @code{2byte} directive, ARC
@itemx .half @var{expression} [, @var{expression}]*
@cindex @code{half} directive, ARC
Use the standard @samp{.hword} directive.

@item .3byte @var{expression} [, @var{expression}]*
@cindex @code{3byte} directive, ARC
It is not clear if this was ever used, but it can be replaced by a
combination of @samp{.hword} and @samp{.byte} directives.

@item .4byte @var{expression} [, @var{expression}]*
@cindex @code{4byte} directive, ARC
Use the standard @samp{.int} directive.

@end table

The following arguments to the @samp{.option} directive are now
deprecated and will be removed in a future release:
@table @code
@item arc6
Use @samp{ARC600}

@item arc7
Use @samp{ARC700}

@item arc
Use the explicit option required.

@end table

@node ARC Modifiers
@section ARC Assembler Modifiers

The following additional assembler modifiers have been added for
position-independent code.  These modifiers are available only with
the ARC 700 processor and generate relocation entries, which are
interpreted by the linker as follows:

@table @code
@item @@pcl(@var{symbol})
@cindex @@pcl(@var{symbol}), ARC modifier
Relative distance of @var{symbol}'s from the
current program counter location.

@item @@gotpc(@var{symbol})
@cindex @@gotpc(@var{symbol}), ARC modifier
Relative distance of @var{symbol}'s Global Offset Table entry from the
current program counter location.

@item @@gotoff(@var{symbol})
@cindex @@gotoff(@var{symbol}), ARC modifier
Distance of @var{symbol} from the base of the Global Offset Table.

@item @@plt32(@var{symbol})
@cindex @@plt32(@var{symbol}), ARC modifier
Distance of @var{symbol}'s Procedure Linkage Table entry from the
current program counter.  This is valid only with branch and link
instructions and PC-relative calls.

FIXME: TLS

@end table

@node ARC Symbols
@section ARC Pre-defined Symbols

The following assembler symbols will prove useful when developing
position-independent code.  These symbols are available only with the
ARC 700 processor.

@table @code
@item __GLOBAL_OFFSET_TABLE__
@cindex __GLOBAL_OFFSET_TABLE__, ARC pre-defined symbol
Symbol referring to the base of the Global Offset Table.

@item __DYNAMIC__
@cindex __DYNAMIC__, ARC pre-defined symbol
An alias for the Global Offset Table
@code{Base__GLOBAL_OFFSET_TABLE__}.  It can be used only with
@code{@@gotpc} modifiers.

@end table

@node ARC Opcodes
@section Opcodes

@cindex ARC opcodes
@cindex opcodes for ARC

For information on the ARC instruction set, see the @cite{ARC Programmers
Reference Manual}, available where you download the processor IP library.
